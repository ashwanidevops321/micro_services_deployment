version: "3"

services:

  db:
    image: postgres:13
    container_name: sonardb
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    volumes:
      - sonardb_data:/var/lib/postgresql/data
    networks:
      - app-network

  nosql-db:
    image: mongo
    container_name: nosql-db
    ports:
      - "27018:27017"
    volumes:
      - ./db:/data/db
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app-network

  products:
    image: ashwanidevops321/products:latest
    container_name: products
    ports:
      - "8002:8002"
    restart: always
    depends_on:
      - nosql-db
      - rabbitmq
    env_file:
      - ./env/products.env
    networks:
      - app-network

  shopping:
    image: ashwanidevops321/shopping:latest
    container_name: shopping
    ports:
      - "8003:8003"
    restart: always
    depends_on:
      - nosql-db
      - rabbitmq
    env_file:
      - ./env/shopping.env
    networks:
      - app-network

  customer:
    image: ashwanidevops321/customer:latest
    container_name: customer
    ports:
      - "8001:8001"
    restart: always
    depends_on:
      - nosql-db
      - rabbitmq
    env_file:
      - ./env/customer.env
    networks:
      - app-network

  nginx-proxy:
    image: ashwanidevops321/proxy:latest
    container_name: nginx-proxy
    ports:
      - "8080:8080"
    depends_on:
      - products
      - shopping
      - customer
    networks:
      - app-network

  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    ports:
      - "9000:9000"
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://db:5432/sonar
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
    depends_on:
      - db
    networks:
      - app-network

volumes:
  sonardb_data:

networks:
  app-network:
    external: true
